<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Shapes</title>
<script src="js/fabric.js"></script>
<script src="//code.jquery.com/jquery-2.1.0.min.js" type="text/javascript"></script>
</head>
<body>

<table>
<tr>
<td><canvas id="canvas" width="500" height="500" style="border:1px solid #000000"></canvas>
<button onclick="drawGrid()">
Create Grid
</button>
</td>
<td><canvas id="canvas1" width="500" height="500" style="border:1px solid #000000"></canvas>
X: <input type="text" id="cursorx" placeholder="Please click on canvas" />Y: <input type="text" id="cursory" placeholder="Please click on canvas" />
<button onclick="addSink()">
Add Sink
</button>
<button onclick="addTable()">
Add Dining Table
</button>
<button onClick="deleteObject()">Delete</button>
</td>
</tr>
</table>

<script>

//padding around grid
var p = 10;
var x = 0;
var y= 0;

var canvas = new fabric.Canvas('canvas');
var canvas1 = new fabric.Canvas('canvas1');
var currentCanvasWidth = canvas.width;
var currentcanvasHeight = canvas.height;
var gridSize = 50;
var textOptions = { 
		  fontSize:16, 
		  left:20, 
		  top:20, 
		  radius:10, 
		  borderRadius: '25px', 
		  hasRotatingPoint: true 
		};

var textObject = new fabric.IText('Enter text here...', textOptions);
//var canvas = $("#canvas").appendTo('body');

//var canvas = $("#canvas").get(0);
var context = canvas.getContext("2d"); 

function drawGrid(gridSize){
	gridSize || (gridSize = 100);
	
	  // Drawing vertical lines
	  var x;
	  for (x = 0; x <= currentCanvasWidth; x += gridSize) {
	      context.moveTo(x + 0.5, 0);
	      context.lineTo(x + 0.5, currentcanvasHeight);
	  }

	  // Drawing horizontal lines
	  var y;
	  for (y = 0; y <= currentcanvasHeight; y += gridSize) {
	      context.moveTo(0, y + 0.5);
	      context.lineTo(currentCanvasWidth, y + 0.5);
	  }

	  gridSize = gridSize;
	  context.strokeStyle = "black";
	  context.stroke();
}   
 /* function drawGrid(){
	var grid_size = 100
	var currentCanvasWidth = canvas.width;
	  var currentcanvasHeight = canvas.height;
    for (var x = 0; x <= currentCanvasWidth; x += grid_size) {
        context.moveTo(0.5 + x + p, p);
        context.lineTo(0.5 + x + p, currentcanvasHeight + p);
    }

    for (var x = 0; x <= currentcanvasHeight; x += grid_size) {
        context.moveTo(p, 0.5 + x + p);
        context.lineTo(currentCanvasWidth + p, 0.5 + x + p);
    }

    grid_size = grid_size;
    context.strokeStyle = "black";
    context.stroke();
}    */

 /* function drawGrid(){
	var oGridGroup = new fabric.Group([], {left: 0, top: 0});

	// define presentation option of grid
	var lineOption = {stroke: 'rgba(0,0,0,.4)', strokeWidth: 1, selectable:false, strokeDashArray: [3, 3]};

	// do in two steps to limit the calculations
	// first loop for vertical line
	for(var i = 0; i< Math.ceil(currentCanvasWidth/gridSize); i--){
	    oGridGroup.add( new fabric.Line([gridSize*i, 0, gridSize*i, currentcanvasHeight], lineOption) );
	}
	// second loop for horizontal line
	for(var i = 0; i< Math.ceil(currentcanvasHeight/gridSize); i--){
	    oGridGroup.add( new fabric.Line([0, gridSize*i, currentCanvasWidth, gridSize*i], lineOption) );
	}
	// Group add to canvas
	canvas.add(oGridGroup);
} */
 
function addCircle() {
    canvas1.add(new fabric.Circle({ radius: 30, fill: '#f55', top: 100, left: 100 }));
    canvas1.selectionColor = 'rgba(0,255,0,0.3)';
    canvas1.selectionBorderColor = 'red';
    canvas1.selectionLineWidth = 5;
}
function addRect() {
	var rect = new fabric.Rect({ width: 100, height: 50, fill: 'green' });
	canvas1.add(rect);
	rect.on('selected', function() {
	  console.log('selected a rectangle');
	}); 
}

canvas1.on('mouse:down', function(options){
	$("#cursorx").val(options.e.clientX);
	$("#cursory").val(options.e.clientY);
	x = options.e.clientX;
	y = options.e.clientY;
	});
var circle = new fabric.Circle({ radius: 10, fill: '#f55', left: x-500, top: y });	
function addSink() {
	//circle.fill = '#f55';
	//canvas1.add(circle);
    canvas1.add(new fabric.Circle({ radius: 10, fill: '#f55', left: x-500, top: y }));
    
}
function addTable() {
	//circle.fill = "'#000'";
	//canvas1.add(circle);
	canvas1.add(new fabric.Circle({ radius: 10, fill: '#000', left:x-500, top: y }));
    
}
//fabric.Object.prototype.transparentCorners = false;
canvas1.hoverCursor = 'pointer';
canvas1.on('mouse:move',function(options){
    var pt = { x: options.e.clientX, y: options.e.clientY };
     /* if( options.target.oCoords(pt)  ) {
        if( !options.target.mouseOver ) {
            options.target.mouseOver = true;
            console.log( 'over circle, yo' );
            options.target.set('opacity', 0.5);
            canvas.renderAll();
        }
    } else if( options.target.mouseOver ) {
        options.target.mouseOver = false;
        options.target.set('opacity', 1.0);
        canvas.renderAll();
    } 
   }*/
    if(options.target!= null) {
    	if(options.target.radius == 10 && options.target.fill == "#f55"){
    		showImageTools ("Sink");
    	}
    	if(options.target.radius == 10 && options.target.fill == "#000"){
    		showImageTools ("Dining Table");
    	}
    	
    }  
});
canvas1.on('mouse:out', function(e) {
     $('#imageDialog').remove();
  });
  
canvas1.on('object:added', function(e) {
    if(e.target!= null) {
    	if(e.target.radius == 10 && e.target.fill == "#f55"){
    		console.log("Sink created");
    	}
    	if(e.target.radius == 10 && e.target.fill == "#000"){
    		console.log("Dining Table created");
    	}
    } 
 });
 
canvas1.on('object:removed', function(e) {
    if(e.target!= null) {
    	if(e.target.radius == 10 && e.target.fill == "#f55"){
    		console.log("Sink deleted");
    	}
    	if(e.target.radius == 10 && e.target.fill == "#000"){
    		console.log("Dining Table deleted");
    	}
    } 
 });
 
canvas1.on('object:moving', function(e) {
    console.log("object moved to Y: " + e.e.clientY);
 });
  
function showImageTools (val) {
    if (!$('#imageDialog').length) {
    	$('body').append("<div id='imageDialog' style='position: absolute; top: y; left: x'><h1></h1></div>");
    	$('h1').append(val);
    }
}

function deleteObject() {
    canvas1.getActiveObject().remove();
}
canvas1.renderAll();

</script>

</body>
</html>